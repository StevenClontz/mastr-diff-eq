
# This file was *autogenerated* from the file C5.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_6 = Integer(6)
t = var("t")

# pick a,b for (D-a)(D-b)
a = randrange(_sage_const_1 ,_sage_const_6 )*choice([-_sage_const_1 ,_sage_const_1 ])
b=a
while a==b:
  b = randrange(_sage_const_1 ,_sage_const_6 )*choice([-_sage_const_1 ,_sage_const_1 ])
# pick particular solution
c=a
while c in [a,b]:
  c = randrange(_sage_const_1 ,_sage_const_6 )*choice([-_sage_const_1 ,_sage_const_1 ])
d = randrange(_sage_const_1 ,_sage_const_6 )*choice([-_sage_const_1 ,_sage_const_1 ])
ypart = choice([
  d*exp(c*t)  
])
k1 = var("k_1")
k2 = var("k_2")
y = k1*exp(a*t)+k2*exp(b*t)

print("ODE:")
def display_coeff(x):
  if x==_sage_const_1 :
    return "+"
  return ("+" if x > -_sage_const_1  else "") + str(x)
print(
  "y''" +
  display_coeff(-a-b) +
  "y'" +
  display_coeff(a*b) +
  "y = " +
  latex(ypart.diff().diff()+(-a-b)*ypart.diff()+a*b*ypart) 
)
print
print("Solution:")
print("y="+latex(y+ypart))

#import json
#print(json.dumps({"x":str(factor(x)),"z":"3"}))

